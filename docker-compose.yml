version: "3.9"

services:
  db:
    image: postgres:16
    container_name: db
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 5s
      timeout: 3s
      retries: 10

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "29092:29092"
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20

  kafdrop:
    image: obsidiandynamics/kafdrop:3.30.0
    container_name: kafdrop
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    ports:
      - "19000:9000"
    depends_on:
      - kafka

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    environment:
      - SERVICES=s3
      - AWS_DEFAULT_REGION=eu-central-1
    ports:
      - "4566:4566"
    volumes:
      - localstack_data:/var/lib/localstack

  backend:
    build: ./backend
    container_name: backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://app:app@db:5432/appdb
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - S3_ENDPOINT_URL=http://localstack:4566
      - AWS_REGION=eu-central-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - S3_BUCKET=ai-logo-studio
      - S3_PUBLIC_BASE=http://localhost:4566 # to open links in the browser
    restart: unless-stopped
    depends_on:
      localstack:
        condition: service_healthy
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else sys.exit(1)"]
      interval: 5s
      timeout: 3s
      retries: 10


  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
    - ./frontend:/app
    - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy

  worker:
    build: ./worker
    container_name: worker
    depends_on:
      localstack:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - DATABASE_URL=postgresql+asyncpg://app:app@db:5432/appdb
    - S3_ENDPOINT_URL=http://localstack:4566
    - AWS_REGION=eu-central-1
    - AWS_ACCESS_KEY_ID=test
    - AWS_SECRET_ACCESS_KEY=test
    - S3_BUCKET=ai-logo-studio

volumes:
  db_data:
  localstack_data:
